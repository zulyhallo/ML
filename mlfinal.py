# -*- coding: utf-8 -*-
"""MLfinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N1zoW8A_7wpDcfQUBviHp3MI6TYUV6Uv
"""

import pandas
import numpy
import numpy as np
import pandas as pd
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import (precision_score,recall_score)
from sklearn.preprocessing import StandardScaler


from sklearn import preprocessing
le = preprocessing.LabelEncoder()

dataset=pandas.read_csv("covid19_dataset.csv")
dataset.update(dataset.fillna(dataset.mean()))


dataset["INTUBATION"]=le.fit_transform(dataset["INTUBATION"])
dataset["INTENSIVE CARE"]=le.fit_transform(dataset["INTENSIVE CARE"])
dataset

print("--------------ENTUBE HASTALARINA GÖRE-----------")
y=dataset[["INTENSIVE CARE"]]
X=dataset.drop(["INTENSIVE CARE","INTUBATION"],axis=1)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

y_train=y_train.values.ravel()
y_test = y_test.values.ravel()

print("MODEL SHAPES")
print('Training Features Shape:', X_train.shape)
print('Training Labels Shape:', y_train.shape)
print('Testing Features Shape:', X_test.shape)
print('Testing Labels Shape:', y_test.shape)

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

print("-------------------------------------------------------------------------------------------------------")
mlp_1 = MLPClassifier(activation = 'relu', hidden_layer_sizes = (30, 30, 30), max_iter = 100, random_state = None, solver = 'lbfgs')
mlp_1.fit(X_train, y_train)
predictions = mlp_1.predict(X_test)

precision = precision_score(y_test, predictions, average = None)

print("PERFORMANCE RESULTS ON FIRST VARIABLE (MLP_1)")
print("PRECISION:", precision)

recall = recall_score(y_test, predictions, average = None)
print("RECALL:", recall)

F2_measure = 5 * precision * recall / (4 * precision + recall)
print("F2 Measure:", F2_measure)

print("-------------------------------------------------------------------------------------------------------")
mlp_2 = MLPClassifier(activation = 'logistic', hidden_layer_sizes = (150, 100, 50), max_iter = 200, random_state = 1, solver = 'adam')

mlp_2.fit(X_train, y_train)

predictions = mlp_2.predict(X_test)

precision = precision_score(y_test, predictions, average = None)

print("PERFORMANCE RESULTS ON SECOND VARIABLE (MLP_2)")

print("PRECISION:", precision)
recall = recall_score(y_test, predictions, average = None)
print("RECALL:", recall)
F2_measure = 5 * precision * recall / (4 * precision + recall)
print("F2 Measure:", F2_measure)

print("--------------------------------------------------------------------------------------------------------")
mlp_3 = MLPClassifier(activation = 'identity', hidden_layer_sizes = (10, 30, 20), max_iter = 300, random_state = 2, solver = 'sgd')

mlp_3.fit(X_train, y_train)

predictions = mlp_3.predict(X_test)

precision = precision_score(y_test, predictions, average = None)

print("PERFORMANCE RESULTS ON THIRD VARIABLE (MLP_3)")

print("PRECISION:", precision)
recall = recall_score(y_test, predictions, average = None)
print("RECALL:", recall)
F2_measure = 5 * precision * recall / (4 * precision + recall)
print("F2 Measure:", F2_measure)

print("--------------------------------------------------------------------------------------------------------")
mlp_4 = MLPClassifier(activation = 'tanh', hidden_layer_sizes = (50, 50, 50), max_iter = 400, random_state = 3, solver = 'lbfgs')

mlp_4.fit(X_train,y_train)

predictions = mlp_4.predict(X_test)

precision = precision_score(y_test, predictions, average = None)

print("PERFORMANCE RESULTS ON FOURTH VARIABLE (MLP_4)")

print("PRECISION:", precision)
recall = recall_score(y_test, predictions, average = None)
print("RECALL:", recall)
F2_measure = 5 * precision * recall / (4 * precision + recall)

print("F2 Measure:", F2_measure)

print("------------------- YOGUN BAKIM HASTALARINA GÖRE ----------------------------")
dataset["INTUBATION"]=le.fit_transform(dataset["INTUBATION"])
dataset["INTENSIVE CARE"]=le.fit_transform(dataset["INTENSIVE CARE"])


y=dataset[["INTENSIVE CARE"]]
X=dataset.drop(["INTENSIVE CARE","INTUBATION"],axis=1)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

y_train=y_train.values.ravel()
y_test = y_test.values.ravel()

print("MODEL SHAPES")
print('Training Features Shape:', X_train.shape)
print('Training Labels Shape:', y_train.shape)
print('Testing Features Shape:', X_test.shape)
print('Testing Labels Shape:', y_test.shape)

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)



print("-------------------------------------------------------------------------------------------------------")
mlp_1 = MLPClassifier(activation = 'relu', hidden_layer_sizes = (30, 30, 30), max_iter = 100, random_state = None, solver = 'lbfgs')
mlp_1.fit(X_train, y_train)
predictions = mlp_1.predict(X_test)

precision = precision_score(y_test, predictions, average = None)

print("PERFORMANCE RESULTS ON FIRST VARIABLE (MLP_1)")
print("PRECISION:", precision)

recall = recall_score(y_test, predictions, average = None)
print("RECALL:", recall)

F2_measure = 5 * precision * recall / (4 * precision + recall)
print("F2 Measure:", F2_measure)

print("-------------------------------------------------------------------------------------------------------")
mlp_2 = MLPClassifier(activation = 'logistic', hidden_layer_sizes = (150, 100, 50), max_iter = 200, random_state = 1, solver = 'adam')

mlp_2.fit(X_train, y_train)

predictions = mlp_2.predict(X_test)

precision = precision_score(y_test, predictions, average = None)

print("PERFORMANCE RESULTS ON SECOND VARIABLE (MLP_2)")

print("PRECISION:", precision)
recall = recall_score(y_test, predictions, average = None)
print("RECALL:", recall)
F2_measure = 5 * precision * recall / (4 * precision + recall)
print("F2 Measure:", F2_measure)

print("--------------------------------------------------------------------------------------------------------")
mlp_3 = MLPClassifier(activation = 'identity', hidden_layer_sizes = (10, 30, 20), max_iter = 300, random_state = 2, solver = 'sgd')

mlp_3.fit(X_train, y_train)

predictions = mlp_3.predict(X_test)

precision = precision_score(y_test, predictions, average = None)

print("PERFORMANCE RESULTS ON THIRD VARIABLE (MLP_3)")

print("PRECISION:", precision)
recall = recall_score(y_test, predictions, average = None)
print("RECALL:", recall)
F2_measure = 5 * precision * recall / (4 * precision + recall)
print("F2 Measure:", F2_measure)

print("--------------------------------------------------------------------------------------------------------")
mlp_4 = MLPClassifier(activation = 'tanh', hidden_layer_sizes = (50, 50, 50), max_iter = 400, random_state = 3, solver = 'lbfgs')

mlp_4.fit(X_train,y_train)

predictions = mlp_4.predict(X_test)

precision = precision_score(y_test, predictions, average = None)

print("PERFORMANCE RESULTS ON FOURTH VARIABLE (MLP_4)")

print("PRECISION:", precision)
recall = recall_score(y_test, predictions, average = None)
print("RECALL:", recall)
F2_measure = 5 * precision * recall / (4 * precision + recall)

print("F2 Measure:", F2_measure)

"""# Yeni Bölüm"""