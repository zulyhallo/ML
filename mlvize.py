# -*- coding: utf-8 -*-
"""MLvize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18t27QA5snFJf28F_lmTQOjNU0ubffciQ
"""



import pandas
import numpy
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

from sklearn import preprocessing
le = preprocessing.LabelEncoder()

dataset=pandas.read_csv("covid19_dataset.csv")

dataset.update(dataset.fillna(dataset.mean()))


dataset["INTUBATION"]=le.fit_transform(dataset["INTUBATION"])
dataset["INTENSIVE CARE"]=le.fit_transform(dataset["INTENSIVE CARE"])



print("--------------ENTUBE HASTALARINA GÖRE-----------")

y=dataset[["INTUBATION"]]
X=dataset.drop(["INTUBATION","INTENSIVE CARE"],axis=1)



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

y_train=y_train.values.ravel()


random_forest = RandomForestClassifier(random_state=1)
random_forest.fit(X_train, y_train)


prediction_rf= random_forest.predict(X_test)

acc = accuracy_score(y_test, prediction_rf)
print('RANDOM FOREST ALGORITHM ACCURACY: %.3f' % acc)

print(confusion_matrix(y_test, prediction_rf))
rf=(confusion_matrix(y_test, prediction_rf))
sensitivity=rf[0,0]/(rf[0,0]+rf[0,1])
print("RF Sensitivity:",sensitivity)
specificity=rf[1,1]/(rf[1,1]+rf[1,0])
print("RF Specificity:",specificity)

print("**********************************************************")
gradient_boosting = GradientBoostingClassifier(n_estimators = 100, max_depth = 3)
gradient_boosting.fit(X_train, y_train)
acc_gradient = round(gradient_boosting.score(X_train, y_train) * 100, 2)
prediction_gb = gradient_boosting.predict(X_test)
acc_gb = accuracy_score(prediction_gb, y_test)
print('GRADIENT BOOSTED TREES ALGORITHM ACCURACY: %.3f' % acc_gb)


print(confusion_matrix(y_test, prediction_gb))
gb=(confusion_matrix(y_test, prediction_gb))
sensitivity_gb=gb[0,0]/(gb[0,0]+gb[0,1])
print("GBT Sensitivity:",sensitivity_gb)
specificity_gb=gb[1,1]/(gb[1,1]+gb[1,0])
print("GBT Specificity:",specificity_gb)

print("------------------- YOGUN BAKIM HASTALARINA GÖRE ----------------------------")
dataset["INTUBATION"]=le.fit_transform(dataset["INTUBATION"])
dataset["INTENSIVE CARE"]=le.fit_transform(dataset["INTENSIVE CARE"])


y=dataset[["INTENSIVE CARE"]]
X=dataset.drop(["INTENSIVE CARE","INTUBATION"],axis=1)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

y_train=y_train.values.ravel()


random_forest = RandomForestClassifier(random_state=1)
random_forest.fit(X_train, y_train)


prediction_rf= random_forest.predict(X_test)

acc = accuracy_score(y_test, prediction_rf)
print('RANDOM FOREST ALGORITHM ACCURACY: %.3f' % acc)

print(confusion_matrix(y_test, prediction_rf))
rf=(confusion_matrix(y_test, prediction_rf))
sensitivity=rf[0,0]/(rf[0,0]+rf[0,1])
print("RF Sensitivity:",sensitivity)
specificity=rf[1,1]/(rf[1,1]+rf[1,0])
print("RF Specificity:",specificity)

print("**********************************************************")
gradient_boosting = GradientBoostingClassifier(n_estimators = 100, max_depth = 3)
gradient_boosting.fit(X_train, y_train)
acc_gradient = round(gradient_boosting.score(X_train, y_train) * 100, 2)
prediction_gb = gradient_boosting.predict(X_test)
acc_gb = accuracy_score(prediction_gb, y_test)
print('GRADIENT BOOSTED TREES ALGORITHM ACCURACY: %.3f' % acc_gb)


print(confusion_matrix(y_test, prediction_gb))
gb=(confusion_matrix(y_test, prediction_gb))
sensitivity_gb=gb[0,0]/(gb[0,0]+gb[0,1])
print("GBT Sensitivity:",sensitivity_gb)
specificity_gb=gb[1,1]/(gb[1,1]+gb[1,0])
print("GBT Specificity:",specificity_gb)